const { Model, DataTypes } = require('sequelize');
const sequelize = require('../config/connection');
const bcrypt = require('bcrypt');

//Create User model
class User extends Model {
    //Set up method to run on instance data (per user) to check password
    checkPassword(loginPw) {
        return.bcrypt.compareSync(loginPw, this.password);
    }
}

//Define table columns and configuration 
User.init(
{
    //Define id column
    id: {
        type: DataTypes.INTEGER,
        allowNull: false,
        primaryKey: true,
        autoIncrement: true
    },
    //Define username column
    username: {
        type: DataTypes.STRING,
        allowNull: false
    },
    //Define email column
    email: {
        type: DataTypes.STRING,
        allowNull: false,
        unique: true,
        validate: {
            isEmail: true
        }
    },
    //Define password column
    password: {
        type: DataTypes.STRING,
        allowNull: false,
        validate: {
            len: [4]
        }
    }
},
{
    hooks: {
        //Set up beforeCreate lifecycle "hook" functionality
        async beforeCreate (newUserData) {
            newUserData.password = await bcrypt.hash(newUserData.password, 10);
            return newUserData;
        },

        //Set up beforeUpdate lifecycle "hook" functionality
        async beforeUpdate(updatedUserData){
            updatedUserData.password = await bcrypt.hash(updatedUserData.password, 10);
        }
    },

    sequelize,
    timestamps: false,
    freezeTableName: true,
    underscored: true,
    modelName: 'User'
}
);

module.exports = User;